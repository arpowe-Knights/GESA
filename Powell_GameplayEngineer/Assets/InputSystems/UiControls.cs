//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystems/UiControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UiControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UiControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UiControls"",
    ""maps"": [
        {
            ""name"": ""UiToggles"",
            ""id"": ""23a69dc5-d543-4def-855c-7bd56491aba0"",
            ""actions"": [
                {
                    ""name"": ""pToggle"",
                    ""type"": ""Button"",
                    ""id"": ""372673fe-e170-41f8-a972-f6f7dc43b219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""oToggle"",
                    ""type"": ""Button"",
                    ""id"": ""57af8f65-9be4-4a82-b505-35f00d194258"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b130323-6dc2-4232-a164-f8bc7407d4d0"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27ae691b-a51a-46f1-bf97-864d86d8db38"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""oToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UiToggles
        m_UiToggles = asset.FindActionMap("UiToggles", throwIfNotFound: true);
        m_UiToggles_pToggle = m_UiToggles.FindAction("pToggle", throwIfNotFound: true);
        m_UiToggles_oToggle = m_UiToggles.FindAction("oToggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UiToggles
    private readonly InputActionMap m_UiToggles;
    private List<IUiTogglesActions> m_UiTogglesActionsCallbackInterfaces = new List<IUiTogglesActions>();
    private readonly InputAction m_UiToggles_pToggle;
    private readonly InputAction m_UiToggles_oToggle;
    public struct UiTogglesActions
    {
        private @UiControls m_Wrapper;
        public UiTogglesActions(@UiControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @pToggle => m_Wrapper.m_UiToggles_pToggle;
        public InputAction @oToggle => m_Wrapper.m_UiToggles_oToggle;
        public InputActionMap Get() { return m_Wrapper.m_UiToggles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UiTogglesActions set) { return set.Get(); }
        public void AddCallbacks(IUiTogglesActions instance)
        {
            if (instance == null || m_Wrapper.m_UiTogglesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UiTogglesActionsCallbackInterfaces.Add(instance);
            @pToggle.started += instance.OnPToggle;
            @pToggle.performed += instance.OnPToggle;
            @pToggle.canceled += instance.OnPToggle;
            @oToggle.started += instance.OnOToggle;
            @oToggle.performed += instance.OnOToggle;
            @oToggle.canceled += instance.OnOToggle;
        }

        private void UnregisterCallbacks(IUiTogglesActions instance)
        {
            @pToggle.started -= instance.OnPToggle;
            @pToggle.performed -= instance.OnPToggle;
            @pToggle.canceled -= instance.OnPToggle;
            @oToggle.started -= instance.OnOToggle;
            @oToggle.performed -= instance.OnOToggle;
            @oToggle.canceled -= instance.OnOToggle;
        }

        public void RemoveCallbacks(IUiTogglesActions instance)
        {
            if (m_Wrapper.m_UiTogglesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUiTogglesActions instance)
        {
            foreach (var item in m_Wrapper.m_UiTogglesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UiTogglesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UiTogglesActions @UiToggles => new UiTogglesActions(this);
    public interface IUiTogglesActions
    {
        void OnPToggle(InputAction.CallbackContext context);
        void OnOToggle(InputAction.CallbackContext context);
    }
}
